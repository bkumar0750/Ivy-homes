<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Auto Complete Name Extractor</title>
    <style>
        :root {
            --background-light: #f4f4f4;
            --background-dark: #121212;
            --container-light: #ffffff;
            --container-dark: #1e1e1e;
            --text-light: #000000;
            --text-dark: #ffffff;
            --button-light: #007bff;
            --button-dark: #2196f3;
            --button-hover-light: #0056b3;
            --button-hover-dark: #1e88e5;
        }
        
        body {
            font-family: Arial, Helvetica, sans-serif;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: var(--background-light);
            color: var(--text-light);
            margin: 0;
            transition: all 0.3s ease-in-out;
        }

        .container {
            text-align: center;
            background-color: var(--container-light);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 6px 15px rgba(0,0,0,0.2);
            width: 90%;
            max-width: 500px;
            transition: all 0.3s ease-in-out;
        }

        input, select {
            width: calc(100% - 20px);
            padding: 12px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 16px;
            transition: 0.3s;
        }

        button {
            width: 100%;
            padding: 12px;
            background-color: var(--button-light);
            color: #ffffff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s ease-in-out;
        }

        button:hover {
            background-color: var(--button-hover-light);
        }

        #result {
            min-height: 50px;
        }

        .result-item {
            background: #334153;
            padding: 12px;
            margin: 5px 0;
            border-radius: 5px;
            word-break: break-word;
            animation: fadeIn 0.5s ease-in-out;
            transition: transform 0.2s;
        }

        .result-item:hover {
            transform: scale(1.05);
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Dark Mode */
        .dark-mode {
            background-color: var(--background-dark);
            color: var(--text-dark);
        }

        .dark-mode .container {
            background-color: var(--container-dark);
        }

        .dark-mode input, .dark-mode select {
            background-color: #333;
            color: #fff;
            border: 1px solid #555;
        }

        .dark-mode button {
            background-color: var(--button-dark);
        }

        .dark-mode button:hover {
            background-color: var(--button-hover-dark);
        }

        /* Dark Mode Toggle Button - Bottom Right Corner */
        .dark-mode-box {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #333;
            color: #fff;
            padding: 12px 18px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            text-align: center;
            transition: background 0.3s ease-in-out, transform 0.2s ease-in-out;
            box-shadow: 0px 4px 10px rgba(0,0,0,0.3);
        }

        .dark-mode-box:hover {
            background-color: #555;
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <!-- Dark Mode Toggle Button -->
    <div class="dark-mode-box" id="darkModeToggle">üåô Dark Mode</div>

    <div class="container">
        <h1>Auto Complete Name Extractor</h1>
        <input type="text" id="query" placeholder="Start typing...">
        <select id="version">
            <option value="v1">API v1</option>
            <option value="v2">API v2</option>
            <option value="v3">API v3</option>
        </select>
        <button id="search">Search</button>
        <div id="result"></div>
    </div>

    <script>
        document.getElementById("search").addEventListener("click", () => {
            const query = document.getElementById("query").value.trim();
            const version = document.getElementById("version").value;
            const resultsDiv = document.getElementById("result");
            const header = document.querySelector("h1");

            if (query.length < 1) {
                resultsDiv.innerHTML = "<p style='color: red;'>Please enter a search query.</p>";
                return;
            }

            resultsDiv.innerHTML = "<p>Loading...</p>";

            // Ensure header is always visible
            header.style.display = "block";
            header.style.visibility = "visible";
            header.style.opacity = "1";
            
            // Displays a loading message while fetching data
            fetch(`http://localhost:3000/ivy?q=${query}&version=${version}`)
                .then(response => {
                    if (!response.ok) throw new Error("Network response was not ok");
                    return response.json();
                })

                // Converts API response into JSON format.
                .then(data => {
                    console.log("Fetched data:", data);

                    resultsDiv.innerHTML = "";

                    if (!data || !Array.isArray(data.results) || data.results.length === 0) {
                        resultsDiv.innerHTML = "<p>No results found.</p>";
                        return;
                    }

                    // API return no results 
                    data.results.forEach(name => {
                        const div = document.createElement("div");
                        div.className = "result-item";
                        div.textContent = name;
                        resultsDiv.appendChild(div);
                    });

                    setTimeout(() => {
                        resultsDiv.scrollIntoView({ behavior: "smooth", block: "start" });
                    }, 100);
                })
                .catch(error => {
                    console.error("Error fetching data:", error);
                    resultsDiv.innerHTML = "<p style='color: red;'>Error fetching data. Please check your connection or try again.</p>";
                });
        });

        // Dark mode toggle with local storage
        const darkModeButton = document.getElementById("darkModeToggle");
        const body = document.body;

        // Check local storage and apply dark mode
        if (localStorage.getItem("darkMode") === "enabled") {
            body.classList.add("dark-mode");
            darkModeButton.textContent = "‚òÄÔ∏è Light Mode";
        }

        darkModeButton.addEventListener("click", () => {
            body.classList.toggle("dark-mode");
            const isDarkMode = body.classList.contains("dark-mode");
            darkModeButton.textContent = isDarkMode ? "‚òÄÔ∏è Light Mode" : "üåô Dark Mode";
            localStorage.setItem("darkMode", isDarkMode ? "enabled" : "disabled");
        });
    </script>
</body>
</html>
